plugins {
    id "eclipse"
    id "idea"
    id "io.sdkman.vendors"              version "1.1.1"     apply false
    id "com.jfrog.bintray"              version "1.7.3"     apply false
    id "com.github.kt3k.coveralls"      version "2.8.1"     apply false
    id 'com.github.ben-manes.versions'  version '0.15.0'
}

// common variables
ext {
    asciidoctorjVersion = '1.5.6'
    asciidoctorjDiagramVersion = '1.5.4.1'
    commonsIoVersion = '2.5'
    commonsConfigurationVersion = '1.10'
    commonsLangVersion = '3.6'
    commonsVfs2Version = '2.1'
    args4jVersion = '2.33'
    freemarkerVersion = '2.3.26-incubating'
    junit4Version = '4.12'
    flexmarkVersion = '0.27.0'
    jettyServerVersion = '9.2.22.v20170606'
    orientDbVersion = '2.2.28'
    groovyVersion = '2.4.12'
    slf4jVersion = '1.7.25'
    logbackVersion = '1.2.3'
    assertjCoreVersion = '2.8.0'
    thymeleafVersion = '3.0.7.RELEASE'
    jsonSimpleVersion = '1.1.1'
    jade4jVersion = '1.2.5'
    mockitoVersion = '2.10.0'
    jsoupVersion = '1.10.3'
}

/**
 * Apply coveralls to the root project as we just need it here to send the
 * aggregated coverage execution data from the jacocoRootReport task
 */
apply plugin: 'com.github.kt3k.coveralls'

/**
 * Apply jacoco plugin to all projects and add jcenter as default repository
 */
allprojects {
    apply plugin: 'jacoco'

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = jacocoVersion
    }

}

/**
 * Common setup for all subprojects
 */
subprojects {

    apply plugin: 'java'

    if( JavaVersion.current().java7Compatible ) {
        apply from: "$rootDir/gradle/signing.gradle"
        // We do not publish any jars from the jbake-app project
        if ( project.name != "jbake-app" ) {
            apply from: "$rootDir/gradle/maven-publishing.gradle"
        }
        // bintray setup
        apply from: "$rootDir/gradle/publishing.gradle"
    }

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "org.slf4j:jul-to-slf4j:$slf4jVersion"
        compile "ch.qos.logback:logback-classic:$logbackVersion"
        compile "ch.qos.logback:logback-core:$logbackVersion"
        testCompile "junit:junit:$junit4Version"
        testCompile "org.assertj:assertj-core:$assertjCoreVersion"
        testCompile "org.mockito:mockito-core:$mockitoVersion"
    }

    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]?${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

    test {
        jvmArgs '-XX:MaxDirectMemorySize=512m', '-Dorientdb.installCustomFormatter=false=false'
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }

    jacocoTestReport.dependsOn test
}

task jacocoMerge(type: JacocoMerge) {
    description 'Merge all testreport execution data from subprojects excluding jbake-app'
    dependsOn subprojects.test
    executionData subprojects.findAll{it.name!="jbake-app"}.jacocoTestReport.executionData
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn jacocoMerge

    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = jacocoMerge.executionData

    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    // Skip Task if not run on CI Server
    onlyIf { System.env.'CI' }
}
