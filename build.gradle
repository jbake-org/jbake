buildscript {
    repositories {
        maven {
            // 404: https://plugins.gradle.org/m2/io/sdkman/vendors/io.sdkman.vendors.gradle.plugin/1.1.1/io.sdkman.vendors.gradle.plugin-1.1.1.jar
            // 200: https://plugins.gradle.org/m2/gradle/plugin/io/sdkman/gradle-sdkvendor-plugin/1.1.1/gradle-sdkvendor-plugin-1.1.1.jar
            url "https://plugins.gradle.org/m2/"
            // https://mvnrepository.com/artifact/gradle.plugin.io.sdkman/gradle-sdkvendor-plugin
            //url "https://mvnrepository.com/artifact/"

            // https://repo.jfrog.org/artifactory/libs-release-bintray/com/jfrog/bintray/com.jfrog.bintray.gradle.plugin/1.8.0/com.jfrog.bintray.gradle.plugin-1.8.0.jar?referrer
        }
    }
    dependencies {
        classpath "gradle.plugin.io.sdkman:gradle-sdkvendor-plugin:1.1.1"
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }
}


plugins {
    id "eclipse"
    id "idea"
    //id "io.sdkman.vendors"              version "1.1.1"     apply false
    //id "com.jfrog.bintray"              version "1.8.0"     apply false
    id "com.github.kt3k.coveralls"      version "2.8.2"     apply false
    id "org.sonarqube"                  version "2.6.2"     apply false
    id 'com.github.ben-manes.versions'  version '0.17.0'
    id "nebula.optional-base"           version "3.3.0"     apply false
}

apply plugin: "io.sdkman.vendors"
apply plugin: 'com.jfrog.bintray'


// common variables
ext {
    asciidoctorjVersion = '1.5.6'
    asciidoctorjDiagramVersion = '1.5.8'
    commonsIoVersion = '2.6'
    commonsConfigurationVersion = '1.10'
    commonsLangVersion = '3.7'
    commonsVfs2Version = '2.2'
    args4jVersion = '2.33'
    freemarkerVersion = '2.3.28'
    junit4Version = '4.12'
    flexmarkVersion = '0.32.20'
    jettyServerVersion = '9.2.24.v20180105'
    orientDbVersion = '2.2.33'
    groovyVersion = '2.4.15'
    slf4jVersion = '1.7.25'
    logbackVersion = '1.2.3'
    assertjCoreVersion = '2.9.0'
    thymeleafVersion = '3.0.9.RELEASE'
    jsonSimpleVersion = '1.1.1'
    jade4jVersion = '1.2.7'
    mockitoVersion = '2.16.0'
    jsoupVersion = '1.11.2'

    isTravis = (System.getenv("TRAVIS") == "true")
    isTravisPullRequest = (System.getenv("TRAVIS_PULL_REQUEST")) != "false"
    pullRequestId = System.getenv("TRAVIS_PULL_REQUEST")
    hasGithub = System.getenv("GITHUBTOKEN") && System.getenv("GITHUBREPO")
    hasSonar = System.getenv("SONARORG") && System.getenv("SONARLOGIN")
    sonarDefaultURL = "https://sonarcloud.io"
    sonarDefaultProjectKey = "org.jbake:jbake-base:jbake-core"
    sonarURL = System.getenv("SONARHOST") ?: sonarDefaultURL
    sonarProjectKey = System.getenv("SONARPROJECTKEY") ?: sonarDefaultProjectKey
}

/**
 * Apply coveralls to the root project as we just need it here to send the
 * aggregated coverage execution data from the jacocoRootReport task
 */
apply plugin: 'com.github.kt3k.coveralls'

/**
 * Apply jacoco plugin to all projects and add jcenter as default repository
 */
allprojects {
    apply plugin: 'jacoco'

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = jacocoVersion
    }

}

/**
 * Common setup for all subprojects
 */
subprojects {

    apply plugin: 'java'
    apply plugin: 'nebula.optional-base'

    if( JavaVersion.current().java7Compatible ) {
        apply from: "$rootDir/gradle/signing.gradle"
        // We do not publish any jars from the jbake-dist project
        if ( project.name != "jbake-dist" ) {
            apply from: "$rootDir/gradle/maven-publishing.gradle"
        }
        // bintray setup
        apply from: "$rootDir/gradle/publishing.gradle"
    }

    // add source and target compatibility for all JavaCompile tasks
    tasks.withType(JavaCompile) {
        sourceCompatibility = 1.7
        targetCompatibility = 1.7

        /**
         *  Fix for warning: [options] bootstrap class path not set in conjunction with -source
         *  See https://stackoverflow.com/questions/42599422/warning-options-bootstrap-class-path-not-set-in-conjunction-with-source-1-7
         */
        File file = file("${System.properties.getProperty("java.home")}/lib/rt.jar")
        if ( file.exists() ) {
            options.setBootstrapClasspath(files(file))
        }
    }

    dependencies {
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "org.slf4j:jul-to-slf4j:$slf4jVersion"
        compile "ch.qos.logback:logback-classic:$logbackVersion", optional
        compile "ch.qos.logback:logback-core:$logbackVersion", optional
        testCompile "junit:junit:$junit4Version"
        testCompile "org.assertj:assertj-core:$assertjCoreVersion"
        testCompile "org.mockito:mockito-core:$mockitoVersion"
    }

    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]?${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

    //set jvm for all Test tasks (like test and smokeTest)
    tasks.withType(Test) {

        def args = ['-Xms512m', '-Xmx3g', '-Dorientdb.installCustomFormatter=false=false']

        /**
         * AppVeyor breaks with mockito throwing a java.lang.OutOfMemoryError: PermGen space
         */
        if ( JavaVersion.current().java7 ) {
            args << '-XX:MaxPermSize=2g'
        }

        /**
         * jdk9 build is unable to determine the amount of MaxDirectMemorySize
         * See https://pastebin.com/ECvQeHx0
         */
        if ( JavaVersion.current().java9Compatible ) {
            args << '-XX:MaxDirectMemorySize=2g'
        }
        jvmArgs args
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }

    jacocoTestReport.dependsOn test
}

task jacocoMerge(type: JacocoMerge) {
    description 'Merge all testreport execution data from subprojects excluding jbake-dist'
    dependsOn subprojects.test
    executionData subprojects.findAll{it.name!="jbake-dist"}.jacocoTestReport.executionData
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn jacocoMerge

    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = jacocoMerge.executionData

    reports {
        html.enabled = true
        xml.enabled = true
    }
}

task testReport(type: TestReport) {
    description "Generate an aggregated Testreport for all projects"

    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    // Skip Task if not run on CI Server
    onlyIf { System.env.'CI' }
}
